{"version":3,"sources":["screens/style.module.scss","components/PageErrorComponent.jsx","templetes/ScreenTemplete.jsx","components/TechnologyComponent.jsx","screens/SkillScreen.jsx"],"names":["module","exports","PageErrorComponent","text","useSelector","state","colors","className","style","pageErrorComponent","color","size","ScreenTemplete","data","title","editHandler","children","isCreateButton","createHandler","action","isLoad","dispatch","useDispatch","useState","isLoading","setLoading","isError","setError","isAdmin","admin","screenBackground","primary","useEffect","a","init","LoadingComponent","component","icon","onClick","icon2","arrayText","split","length","textNode","i","push","textColorChanger","screenTempleteContainer","backgroundColor","ModelComponent","lazy","TechnologyComponent","skill","updateHandler","validationSchema","deleteHandler","React","isUpdateModel","setUpdateModel","updateModelToggler","e","initalValues","name","iconPath","_id","technologyContainer","editContainer","warning","iconContainer","src","alt","closeHandler","submitHandler","value","ImageAssets","path","MyTextInput","label","placeholder","SkillScreen","isPageEdit","setPageEdit","isCreateModel","setCreateModel","isSkill","load","pageInitalValues","yup","min","max","required","pageValidationSchema","createModelToggler","pageModelToggler","editPageSubmitHandler","values","setSubmitting","editSkillTitlePageAction","createMessageAction","createSubmitHandler","createSkillAction","editSkillAction","id","window","confirm","deleteSkillAction","skillFetchAction","skillScreenContainer","map"],"mappings":"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","file":"static/js/7.00c0cde6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutScreenContainer\":\"style_aboutScreenContainer__3UC0c\",\"subTitle\":\"style_subTitle__3Vftq\",\"description\":\"style_description__365Am\",\"skillScreenContainer\":\"style_skillScreenContainer__FXslf\",\"projectsScreenContainer\":\"style_projectsScreenContainer__22dLB\",\"contactScreen\":\"style_contactScreen__2RV21\",\"loginScreen\":\"style_loginScreen__3opmN\"};","import React from 'react';\r\nimport style from './style.module.scss';\r\nimport { IoCloudOffline } from 'react-icons/io5';\r\nimport { useSelector } from 'react-redux';\r\nexport default function PageErrorComponent() {\r\n  const { text } = useSelector((state) => state.colors);\r\n  return (\r\n    <div className={style.pageErrorComponent}>\r\n      <div style={{ color: text }}>\r\n        <IoCloudOffline size={80} color={text} />\r\n        <p>Something Went Wrong</p>\r\n        <p>Please check your Network Connection and Try again!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport style from './style.module.scss';\r\nimport { BiEdit } from 'react-icons/bi';\r\nimport { IoMdAdd } from 'react-icons/io';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageErrorComponent from '../components/PageErrorComponent';\r\nimport LoadingComponent from '../components/LoadingComponent';\r\nexport default function ScreenTemplete({\r\n  title,\r\n  editHandler,\r\n  children,\r\n  isCreateButton,\r\n  createHandler,\r\n  action,\r\n  isLoad,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n  const { isAdmin } = useSelector((state) => state.admin);\r\n  const { screenBackground, text, primary } = useSelector(\r\n    (state) => state.colors\r\n  );\r\n  function textColorChanger(text) {\r\n    if (!text) {\r\n      return;\r\n    }\r\n    let arrayText = text.split(' ');\r\n    if (arrayText.length <= 1) {\r\n      return (\r\n        <span className={style.title} style={{ color: primary }}>\r\n          {arrayText[0]}\r\n        </span>\r\n      );\r\n    } else {\r\n      let textNode = [];\r\n      for (let i = 0; i < arrayText.length - 1; i++) {\r\n        textNode.push(arrayText[i]);\r\n        textNode.push(' ');\r\n      }\r\n      textNode.push(\r\n        <span style={{ color: primary }} key='1'>\r\n          {arrayText[arrayText.length - 1]}\r\n        </span>\r\n      );\r\n      return <span className={style.title}>{textNode}</span>;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!action) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    const init = async () => {\r\n      try {\r\n        setError(false);\r\n        setLoading(true);\r\n        await dispatch(action());\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n        setError(true);\r\n      }\r\n    };\r\n    if (!isLoad) {\r\n      init();\r\n    }\r\n  }, [action, dispatch, isLoad]);\r\n\r\n  let data;\r\n  if (isLoading) {\r\n    data = <LoadingComponent />;\r\n  } else if (!isLoading && isError) {\r\n    data = <PageErrorComponent />;\r\n  } else {\r\n    data = (\r\n      <div className={style.component}>\r\n        {isAdmin && (\r\n          <div>\r\n            <BiEdit className={style.icon} onClick={editHandler} size={30} />\r\n            {isCreateButton && (\r\n              <IoMdAdd\r\n                className={style.icon2}\r\n                onClick={createHandler}\r\n                size={30}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n        <div>{textColorChanger(title)}</div>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={style.screenTempleteContainer}\r\n      style={{\r\n        color: text,\r\n        backgroundColor: screenBackground,\r\n      }}>\r\n      {data}\r\n    </div>\r\n  );\r\n}\r\n","import React, { lazy } from 'react';\r\nimport style from './style.module.scss';\r\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\r\nimport ImageAssets from '../assets/ImageAssets';\r\nimport MyTextInput from './MyInputsCompoenent/MyTextInput';\r\nconst ModelComponent = lazy(() => import('./FormModelComponent'));\r\nexport default function TechnologyComponent({\r\n  skill,\r\n  colors,\r\n  isAdmin,\r\n  updateHandler,\r\n  validationSchema,\r\n  deleteHandler,\r\n}) {\r\n  const [isUpdateModel, setUpdateModel] = React.useState(false);\r\n  const updateModelToggler = () => {\r\n    setUpdateModel((e) => !e);\r\n  };\r\n  const initalValues = {\r\n    name: skill.name,\r\n    iconPath: skill.iconPath,\r\n    _id: skill._id,\r\n  };\r\n  return (\r\n    <div className={style.technologyContainer}>\r\n      {isAdmin && (\r\n        <div className={style.editContainer}>\r\n          <AiOutlineDelete\r\n            color={colors.warning}\r\n            size={14}\r\n            onClick={() => deleteHandler(skill._id)}\r\n            className={style.icon}\r\n          />\r\n          <AiOutlineEdit\r\n            size={14}\r\n            onClick={updateModelToggler}\r\n            className={style.icon}\r\n            color={colors.primary}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className={style.iconContainer}>\r\n        <img src={skill.iconPath} alt='icon' />\r\n      </div>\r\n      <span>{skill.name}</span>\r\n      {isUpdateModel && (\r\n        <ModelComponent\r\n          title='Update Skills'\r\n          closeHandler={updateModelToggler}\r\n          initalValues={initalValues}\r\n          validationSchema={validationSchema}\r\n          submitHandler={updateHandler}>\r\n          {(value) => {\r\n            return (\r\n              <>\r\n                <ImageAssets path={value.icon} />\r\n                <MyTextInput\r\n                  name='iconPath'\r\n                  label='Icon Path'\r\n                  placeholder='Enter Icon Path'\r\n                />\r\n                <MyTextInput\r\n                  name='name'\r\n                  label='Name'\r\n                  placeholder='Enter Name'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { lazy } from 'react';\r\nimport ScreenTemplete from '../templetes/ScreenTemplete';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport TechnologyComponent from '../components/TechnologyComponent';\r\nimport style from './style.module.scss';\r\nimport MyTextInput from '../components/MyInputsCompoenent/MyTextInput';\r\nimport * as yup from 'yup';\r\nimport ImageAssets from '../assets/ImageAssets';\r\nimport {\r\n  editSkillTitlePageAction,\r\n  createSkillAction,\r\n  deleteSkillAction,\r\n  editSkillAction,\r\n  skillFetchAction,\r\n} from '../store/actions/AdminActions';\r\nimport { createMessageAction } from '../store/actions/MessageActions';\r\nconst ModelComponent = lazy(() => import('../components/FormModelComponent'));\r\n\r\nexport default function SkillScreen() {\r\n  const dispatch = useDispatch();\r\n  const [isPageEdit, setPageEdit] = React.useState(false);\r\n  const [isCreateModel, setCreateModel] = React.useState(false);\r\n  const { title, data } = useSelector((state) => state.admin.skill);\r\n  const { isAdmin } = useSelector((state) => state.admin);\r\n  const colors = useSelector((state) => state.colors);\r\n  const { isSkill } = useSelector((state) => state.load);\r\n\r\n  const initalValues = {\r\n    name: '',\r\n    iconPath: '',\r\n  };\r\n  const pageInitalValues = {\r\n    title: title ? title : '',\r\n  };\r\n  const validationSchema = yup.object({\r\n    name: yup.string().min(2).max(100).required(),\r\n    iconPath: yup.string().min(4).required(),\r\n  });\r\n  const pageValidationSchema = yup.object({\r\n    title: yup.string().min(4).max(100).required(),\r\n  });\r\n  const createModelToggler = () => {\r\n    setCreateModel((e) => !e);\r\n    return;\r\n  };\r\n  const pageModelToggler = () => {\r\n    setPageEdit((e) => !e);\r\n    return;\r\n  };\r\n\r\n  const editPageSubmitHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(editSkillTitlePageAction(values.title));\r\n      dispatch(createMessageAction('Successfully Updated!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      setSubmitting(false);\r\n      dispatch(createMessageAction('Something Went Wrong!', 'error'));\r\n    }\r\n  };\r\n\r\n  const createSubmitHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(createSkillAction(values));\r\n      dispatch(createMessageAction('Successfully Created!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      dispatch(createMessageAction('Something Went Wrong!', 'error'));\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const updateHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(editSkillAction(values));\r\n      dispatch(createMessageAction('Successfully Updated!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      setSubmitting(false);\r\n      dispatch(createMessageAction('Something Went Wrong!', 'error'));\r\n    }\r\n  };\r\n\r\n  const deleteHandler = async (id) => {\r\n    const isConfirm = window.confirm('Are you sure?');\r\n    if (!isConfirm) return;\r\n    try {\r\n      await dispatch(deleteSkillAction(id));\r\n      dispatch(createMessageAction('Successfully Deleted!', 'warning'));\r\n    } catch (error) {\r\n      dispatch(createMessageAction('Something Went Wrong!', 'error'));\r\n    }\r\n  };\r\n  return (\r\n    <ScreenTemplete\r\n      isLoad={isSkill}\r\n      title={title}\r\n      action={skillFetchAction}\r\n      editHandler={pageModelToggler}\r\n      isCreateButton\r\n      createHandler={createModelToggler}>\r\n      <div className={style.skillScreenContainer}>\r\n        {data.map((skill) => (\r\n          <TechnologyComponent\r\n            isAdmin={isAdmin}\r\n            skill={skill}\r\n            key={skill._id}\r\n            colors={colors}\r\n            updateHandler={updateHandler}\r\n            validationSchema={validationSchema}\r\n            deleteHandler={deleteHandler}\r\n          />\r\n        ))}\r\n      </div>\r\n      {/* page edit model */}\r\n      {isPageEdit && (\r\n        <ModelComponent\r\n          title='Edit Page'\r\n          closeHandler={pageModelToggler}\r\n          initalValues={pageInitalValues}\r\n          validationSchema={pageValidationSchema}\r\n          submitHandler={editPageSubmitHandler}>\r\n          {() => {\r\n            return (\r\n              <>\r\n                <MyTextInput\r\n                  name='title'\r\n                  label='Title'\r\n                  placeholder='Enter Title'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n      {/* Create Skills Model */}\r\n      {isCreateModel && (\r\n        <ModelComponent\r\n          title='Add Skills'\r\n          closeHandler={createModelToggler}\r\n          initalValues={initalValues}\r\n          validationSchema={validationSchema}\r\n          submitHandler={createSubmitHandler}>\r\n          {(value) => {\r\n            return (\r\n              <>\r\n                <ImageAssets path={value.iconPath} />\r\n                <MyTextInput\r\n                  name='iconPath'\r\n                  label='Icon Path'\r\n                  placeholder='Enter IconPath'\r\n                />\r\n                <MyTextInput\r\n                  name='name'\r\n                  label='Name'\r\n                  placeholder='Enter Name'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n    </ScreenTemplete>\r\n  );\r\n}\r\n"],"sourceRoot":""}