{"version":3,"sources":["screens/style.module.scss","components/PageErrorComponent.jsx","templetes/ScreenTemplete.jsx","components/ProjectComponent.jsx","screens/ProjectsScreen.jsx"],"names":["module","exports","PageErrorComponent","text","useSelector","state","colors","className","style","pageErrorComponent","color","size","ScreenTemplete","data","title","editHandler","children","isCreateButton","createHandler","action","isLoad","dispatch","useDispatch","useState","isLoading","setLoading","isError","setError","isAdmin","admin","screenBackground","primary","useEffect","a","init","LoadingComponent","component","icon","onClick","icon2","arrayText","split","length","textNode","i","push","textColorChanger","screenTempleteContainer","backgroundColor","ModelComponent","lazy","ProjectComponent","project","validationSchema","updateHandler","deleteHandler","isImageLoading","setImageLoading","isUpdateModel","setUpdateModel","updateModelHandler","e","initalValues","_id","name","link","iconPath","projectComponent","editContainer","warning","href","target","rel","ImageLoadingComponent","src","alt","display","onLoad","onError","closeHandler","submitHandler","value","ImageAssets","path","MyTextInput","label","placeholder","React","ProjectsScreen","isEditModel","setEditModel","isProjectModel","setProjectModel","isProject","load","projectValidationSchema","yup","min","max","required","initalValue","editModalHandler","projectModelHandler","editPageSubmitHandler","values","setSubmitting","editProjectTitlePageAction","createMessageAction","console","log","projectSubmitHandler","createProjectAction","editProjectAction","response","id","window","confirm","deleteProjectAction","projectFetchAction","projectsScreenContainer","map"],"mappings":"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","file":"static/js/6.8e6cbc8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutScreenContainer\":\"style_aboutScreenContainer__3UC0c\",\"subTitle\":\"style_subTitle__3Vftq\",\"description\":\"style_description__365Am\",\"skillScreenContainer\":\"style_skillScreenContainer__FXslf\",\"projectsScreenContainer\":\"style_projectsScreenContainer__22dLB\",\"contactScreen\":\"style_contactScreen__2RV21\",\"loginScreen\":\"style_loginScreen__3opmN\"};","import React from 'react';\r\nimport style from './style.module.scss';\r\nimport { IoCloudOffline } from 'react-icons/io5';\r\nimport { useSelector } from 'react-redux';\r\nexport default function PageErrorComponent() {\r\n  const { text } = useSelector((state) => state.colors);\r\n  return (\r\n    <div className={style.pageErrorComponent}>\r\n      <div style={{ color: text }}>\r\n        <IoCloudOffline size={80} color={text} />\r\n        <p>Something Went Wrong</p>\r\n        <p>Please check your Network Connection and Try again!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport style from './style.module.scss';\r\nimport { BiEdit } from 'react-icons/bi';\r\nimport { IoMdAdd } from 'react-icons/io';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PageErrorComponent from '../components/PageErrorComponent';\r\nimport LoadingComponent from '../components/LoadingComponent';\r\nexport default function ScreenTemplete({\r\n  title,\r\n  editHandler,\r\n  children,\r\n  isCreateButton,\r\n  createHandler,\r\n  action,\r\n  isLoad,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n  const { isAdmin } = useSelector((state) => state.admin);\r\n  const { screenBackground, text, primary } = useSelector(\r\n    (state) => state.colors\r\n  );\r\n  function textColorChanger(text) {\r\n    if (!text) {\r\n      return;\r\n    }\r\n    let arrayText = text.split(' ');\r\n    if (arrayText.length <= 1) {\r\n      return (\r\n        <span className={style.title} style={{ color: primary }}>\r\n          {arrayText[0]}\r\n        </span>\r\n      );\r\n    } else {\r\n      let textNode = [];\r\n      for (let i = 0; i < arrayText.length - 1; i++) {\r\n        textNode.push(arrayText[i]);\r\n        textNode.push(' ');\r\n      }\r\n      textNode.push(\r\n        <span style={{ color: primary }} key='1'>\r\n          {arrayText[arrayText.length - 1]}\r\n        </span>\r\n      );\r\n      return <span className={style.title}>{textNode}</span>;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!action) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    const init = async () => {\r\n      try {\r\n        setError(false);\r\n        setLoading(true);\r\n        await dispatch(action());\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n        setError(true);\r\n      }\r\n    };\r\n    if (!isLoad) {\r\n      init();\r\n    }\r\n  }, [action, dispatch, isLoad]);\r\n\r\n  let data;\r\n  if (isLoading) {\r\n    data = <LoadingComponent />;\r\n  } else if (!isLoading && isError) {\r\n    data = <PageErrorComponent />;\r\n  } else {\r\n    data = (\r\n      <div className={style.component}>\r\n        {isAdmin && (\r\n          <div>\r\n            <BiEdit className={style.icon} onClick={editHandler} size={30} />\r\n            {isCreateButton && (\r\n              <IoMdAdd\r\n                className={style.icon2}\r\n                onClick={createHandler}\r\n                size={30}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n        <div>{textColorChanger(title)}</div>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={style.screenTempleteContainer}\r\n      style={{\r\n        color: text,\r\n        backgroundColor: screenBackground,\r\n      }}>\r\n      {data}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, lazy } from 'react';\r\nimport style from './style.module.scss';\r\nimport ImageLoadingComponent from './ImageLoadingComponent';\r\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\r\nimport MyTextInput from './MyInputsCompoenent/MyTextInput';\r\nimport ImageAssets from '../assets/ImageAssets';\r\nconst ModelComponent = lazy(() => import('./FormModelComponent'));\r\nexport default function ProjectComponent({\r\n  project,\r\n  colors,\r\n  isAdmin,\r\n  validationSchema,\r\n  updateHandler,\r\n  deleteHandler,\r\n}) {\r\n  const [isImageLoading, setImageLoading] = useState(true);\r\n  const [isUpdateModel, setUpdateModel] = useState(false);\r\n  const updateModelHandler = () => {\r\n    setUpdateModel((e) => !e);\r\n  };\r\n  const initalValues = {\r\n    _id: project._id,\r\n    name: project.name,\r\n    link: project.link,\r\n    iconPath: project.iconPath,\r\n  };\r\n  return (\r\n    <>\r\n      <div className={style.projectComponent}>\r\n        {isAdmin && (\r\n          <div className={style.editContainer}>\r\n            <AiOutlineDelete\r\n              color={colors.warning}\r\n              size={20}\r\n              onClick={() => deleteHandler(project._id)}\r\n              className={style.icon}\r\n            />\r\n            <AiOutlineEdit\r\n              size={20}\r\n              className={style.icon}\r\n              color={colors.primary}\r\n              onClick={updateModelHandler}\r\n            />\r\n          </div>\r\n        )}\r\n        <a\r\n          href={project.link}\r\n          target='_blank'\r\n          rel='noreferrer'\r\n          style={{ color: colors.text }}>\r\n          <ImageLoadingComponent isLoading={isImageLoading} />\r\n          <img\r\n            src={project.iconPath}\r\n            alt='project'\r\n            style={{ display: isImageLoading ? 'none' : 'block' }}\r\n            onLoad={() => setImageLoading(false)}\r\n            onError={() => setImageLoading(true)}\r\n          />\r\n          <span>{project.name}</span>\r\n        </a>\r\n      </div>\r\n      {isUpdateModel && (\r\n        <ModelComponent\r\n          title='Update Project'\r\n          closeHandler={updateModelHandler}\r\n          initalValues={initalValues}\r\n          validationSchema={validationSchema}\r\n          submitHandler={updateHandler}>\r\n          {(value) => {\r\n            return (\r\n              <>\r\n                <ImageAssets path={value.iconPath} />\r\n                <MyTextInput\r\n                  name='iconPath'\r\n                  label='Icon'\r\n                  placeholder='Enter Icon Path'\r\n                />\r\n                <MyTextInput\r\n                  name='name'\r\n                  label='Name'\r\n                  placeholder='Enter Name'\r\n                />\r\n                <MyTextInput\r\n                  name='link'\r\n                  label='Link'\r\n                  placeholder='Enter Link'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ScreenTemplete from '../templetes/ScreenTemplete';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ProjectComponent from '../components/ProjectComponent';\r\nimport style from './style.module.scss';\r\nimport MyTextInput from '../components/MyInputsCompoenent/MyTextInput';\r\nimport ImageAssets from '../assets/ImageAssets';\r\nimport * as yup from 'yup';\r\nimport {\r\n  editProjectTitlePageAction,\r\n  createProjectAction,\r\n  deleteProjectAction,\r\n  editProjectAction,\r\n  projectFetchAction,\r\n} from '../store/actions/AdminActions';\r\nimport { createMessageAction } from '../store/actions/MessageActions';\r\nconst ModelComponent = React.lazy(() =>\r\n  import('../components/FormModelComponent')\r\n);\r\nexport default function ProjectsScreen() {\r\n  const dispatch = useDispatch();\r\n  const [isEditModel, setEditModel] = React.useState(false);\r\n  const [isProjectModel, setProjectModel] = React.useState(false);\r\n  const { title, data } = useSelector((state) => state.admin.project);\r\n  const { isAdmin } = useSelector((state) => state.admin);\r\n  const colors = useSelector((state) => state.colors);\r\n  const { isProject } = useSelector((state) => state.load);\r\n\r\n  const projectInitalValue = {\r\n    name: '',\r\n    link: '',\r\n    iconPath: '',\r\n  };\r\n  const projectValidationSchema = yup.object({\r\n    name: yup.string().min(4).max(100).required(),\r\n    link: yup.string().min(4).required(),\r\n    iconPath: yup.string().min(4).required(),\r\n  });\r\n  const initalValue = {\r\n    title: title ? title : '',\r\n  };\r\n  const validationSchema = yup.object({\r\n    title: yup.string().min(4).max(100).required(),\r\n  });\r\n  const editModalHandler = () => {\r\n    setEditModel((e) => !e);\r\n    return;\r\n  };\r\n  const projectModelHandler = () => {\r\n    setProjectModel((e) => !e);\r\n    return;\r\n  };\r\n  const editPageSubmitHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(editProjectTitlePageAction(values.title));\r\n      dispatch(createMessageAction('Successfully Updated!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(createMessageAction('Something Went Wrong', 'error'));\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const projectSubmitHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(createProjectAction(values));\r\n      dispatch(createMessageAction('Successfully Created!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setSubmitting(false);\r\n      dispatch(createMessageAction('Something Went Wrong', 'error'));\r\n    }\r\n  };\r\n\r\n  const updateHandler = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(editProjectAction(values));\r\n      dispatch(createMessageAction('Successfully Updated!', 'warning'));\r\n      setSubmitting(false);\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      setSubmitting(false);\r\n      dispatch(createMessageAction('Something Went Wrong', 'error'));\r\n    }\r\n  };\r\n\r\n  const deleteHandler = async (id) => {\r\n    const isConfirm = window.confirm('Are you sure?');\r\n    if (!isConfirm) return;\r\n    try {\r\n      await dispatch(deleteProjectAction(id));\r\n      dispatch(createMessageAction('Successfully Deleted!', 'warning'));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(createMessageAction('Something Went Wrong', 'error'));\r\n    }\r\n  };\r\n  return (\r\n    <ScreenTemplete\r\n      action={projectFetchAction}\r\n      title={title}\r\n      editHandler={editModalHandler}\r\n      isCreateButton\r\n      isLoad={isProject}\r\n      createHandler={projectModelHandler}>\r\n      <div className={style.projectsScreenContainer}>\r\n        {data.map((project) => {\r\n          return (\r\n            <ProjectComponent\r\n              isAdmin={isAdmin}\r\n              colors={colors}\r\n              project={project}\r\n              key={project._id}\r\n              validationSchema={projectValidationSchema}\r\n              updateHandler={updateHandler}\r\n              deleteHandler={deleteHandler}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {isEditModel && (\r\n        <ModelComponent\r\n          title='Edit Page'\r\n          closeHandler={editModalHandler}\r\n          initalValues={initalValue}\r\n          validationSchema={validationSchema}\r\n          submitHandler={editPageSubmitHandler}>\r\n          {() => {\r\n            return (\r\n              <>\r\n                <MyTextInput\r\n                  name='title'\r\n                  label='Title'\r\n                  placeholder='Enter Title'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n      {isProjectModel && (\r\n        <ModelComponent\r\n          title='Add Project'\r\n          closeHandler={projectModelHandler}\r\n          initalValues={projectInitalValue}\r\n          validationSchema={projectValidationSchema}\r\n          submitHandler={projectSubmitHandler}>\r\n          {(value) => {\r\n            return (\r\n              <>\r\n                <ImageAssets path={value.iconPath} />\r\n                <MyTextInput\r\n                  name='iconPath'\r\n                  label='IconPath'\r\n                  placeholder='Enter IconPath'\r\n                />\r\n                <MyTextInput\r\n                  name='name'\r\n                  label='Name'\r\n                  placeholder='Enter Name'\r\n                />\r\n                <MyTextInput\r\n                  name='link'\r\n                  label='Path'\r\n                  placeholder='Enter link'\r\n                />\r\n              </>\r\n            );\r\n          }}\r\n        </ModelComponent>\r\n      )}\r\n    </ScreenTemplete>\r\n  );\r\n}\r\n"],"sourceRoot":""}